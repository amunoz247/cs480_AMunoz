#include "object.h"
#include <iostream>
#include <fstream>
#include <string>

Object::Object()
{
  /*Vertices = {
    {{1.0f, -1.0f, -1.0f}, {0.0f, 0.0f, 0.0f}},
    {{1.0f, -1.0f, 1.0f}, {1.0f, 0.0f, 0.0f}},
    {{-1.0f, -1.0f, 1.0f}, {0.0f, 1.0f, 0.0f}},
    {{-1.0f, -1.0f, -1.0f}, {0.0f, 0.0f, 1.0f}},
    {{1.0f, 1.0f, -1.0f}, {1.0f, 1.0f, 0.0f}},
    {{1.0f, 1.0f, 1.0f}, {1.0f, 0.0f, 1.0f}},
    {{-1.0f, 1.0f, 1.0f}, {0.0f, 1.0f, 1.0f}},
    {{-1.0f, 1.0f, -1.0f}, {1.0f, 1.0f, 1.0f}}
  };

  Indices = {
    2, 3, 4,
    8, 7, 6,
    1, 5, 6,
    2, 6, 7,
    7, 8, 4,
    1, 4, 8,
    1, 2, 4,
    5, 8, 6,
    2, 1, 6,
    3, 2, 7,
    3, 7, 4,
    5, 1, 8
  };

  // The index works at a 0th index
  for(unsigned int i = 0; i < Indices.size(); i++)
  {
    Indices[i] = Indices[i] - 1;
  }

  angle = 0.0f;

  glGenBuffers(1, &VB);
  glBindBuffer(GL_ARRAY_BUFFER, VB);
  glBufferData(GL_ARRAY_BUFFER, sizeof(Vertex) * Vertices.size(), &Vertices[0], GL_STATIC_DRAW);

  glGenBuffers(1, &IB);
  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, IB);
  glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(unsigned int) * Indices.size(), &Indices[0], GL_STATIC_DRAW);*/

  bool readFile = loadObjFile("../object/board.obj", Vertices, UVS, Normals);

  glBufferData(GL_ARRAY_BUFFER, sizeof(glm::vec3) * Vertices.size(), &Vertices[0], GL_STATIC_DRAW);
}

Object::~Object()
{
  Vertices.clear();
  UVS.clear();
  Normals.clear();
}

bool loadObjFile(char *fileName, std::vector < glm::vec3 > & outVertices,
    std::vector < glm::vec2 > & outUVS,
    std::vector < glm::vec3 > & outNormals)
{
    std::vector<unsigned int> vertIndices, uvIndices, normIndices;
    std::vector<glm::vec3> tempVertices;
    std::vector<glm::vec2> tempUVS;
    std::vector<glm::vec3> tempNormals;
    std::string vertex1, vertex2, vertex3;
    unsigned int vertIndex[3], uvIndex[3], normIndex[3];
    char header[1000];

    FILE *file = fopen(fileName, "r");
    if(file == NULL)
    {
        std::cerr << "Unable to read the file " << file << "." << std::endl;
        return false;
    }

    while( 1 )
    {
        //read the very first word in a line
        int read = fscanf(file, "%s", header);
        if(read == EOF)
        {
            break; //Reached end of file. Break out of loop
        }

        else { //parse line header
            if( strcmp( header, "v" ) == 0 )
            {
                glm::vec3 Vertex;
                fscanf(file, "%f %f %f\n", &Vertex.x, &Vertex.y, &Vertex.z);
                tempVertices.push_back(Vertex);
            }

            else if( strcmp( header, "vt" ) == 0 )
            {
                glm::vec2 UV;
                fscanf(file, "%f %f\n", &UV.x, &UV.y);
                tempUVS.push_back(UV);
            }
            
            else if( strcmp( header, "vn" ) == 0 )
            {
                glm::vec3 Normal;
                fscanf(file, "%f %f %f\n", &Normal.x, &Normal.y, &Normal.z);
                tempNormals.push_back(Normal);
            }
            
            else if( strcmp( header, "f" ) == 0 )
            {
                int equal = fscanf(file, "%d/%d/%d %d/%d/%d %d/%d/%d\n", &vertIndex[0], &uvIndex[0], &normIndex[0], &vertIndex[1], &uvIndex[1], &normIndex[1], &vertIndex[2], &uvIndex[2], &normIndex[2] );

                if (equal != 9){
                    std::cerr << "File can't be read by parser : ( Try different method of exporting )" << std::endl;
                    return false;
                }

                vertIndices.push_back(vertIndex[0]);
                vertIndices.push_back(vertIndex[1]);
                vertIndices.push_back(vertIndex[2]);
                uvIndices.push_back(uvIndex[0]);
                uvIndices.push_back(uvIndex[1]);
                uvIndices.push_back(uvIndex[2]);
                normIndices.push_back(normIndex[0]);
                normIndices.push_back(normIndex[1]);
                normIndices.push_back(normIndex[2]);
            }

            for( unsigned int i = 0; i < vertIndices.size(); i++ )
            {
                vertIndex = vertIndices[i];
                Vertex = tempVertices[vertIndex-1];
                outVertices.push_back(Vertex);
            }

            for( unsigned int i = 0; i < uvIndices.size(); i++ )
            {
                uvIndex = uvIndices[i];
                UV = tempUVS[uvIndex-1];
                outUVS.push_back(UV);
            }

            for( unsigned int i = 0; i < normIndices.size(); i++ )
            {
                normIndex = normIndices[i];
                Normal = tempNormals[normIndex-1];
                outNormals.push_back(Normal);
            }
        }
    }

    
    return false;
}

void Object::Update(unsigned int dt)
{
  angle += dt * M_PI/1000;
  /*model = (glm::rotate(glm::mat4(1.0f), (angle), glm::vec3(0.0, 1.0, 0.0))) *
            (glm::translate(glm::mat4(1.0f), glm::vec3(5.0, 1.0, 0.0))) *
            (glm::rotate(glm::mat4(1.0f), (angle), glm::vec3(0.0, 1.0, 0.0)));*/
  model = glm::rotate(glm::mat4(1.0f), (angle), glm::vec3(0.0, 1.0, 0.0));
}

glm::mat4 Object::GetModel()
{
  return model;
}

void Object::Render()
{
  glEnableVertexAttribArray(0);
  glEnableVertexAttribArray(1);

  glBindBuffer(GL_ARRAY_BUFFER, VB);
  glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), 0);
  glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), (void*)offsetof(Vertex,color));

  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, IB);

  glDrawElements(GL_TRIANGLES, UVS.size(), GL_UNSIGNED_INT, 0);

  glDisableVertexAttribArray(0);
  glDisableVertexAttribArray(1);
}

